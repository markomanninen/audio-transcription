#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
BACKEND_DIR="${PROJECT_ROOT}/backend"

echo "🧪 E2E Test Runner with Isolated Test Database"
echo "==============================================="
echo ""

# Save current backend .env
BACKEND_ENV="${BACKEND_DIR}/.env"
BACKEND_ENV_BACKUP="${BACKEND_DIR}/.env.backup.$$"

if [ -f "${BACKEND_ENV}" ]; then
    echo "📋 Backing up current backend .env..."
    cp "${BACKEND_ENV}" "${BACKEND_ENV_BACKUP}"
fi

# Function to restore environment on exit
cleanup() {
    EXIT_CODE=$?
    echo ""
    echo "🧹 Cleaning up..."

    # Restore original .env
    if [ -f "${BACKEND_ENV_BACKUP}" ]; then
        echo "📋 Restoring original backend .env..."
        mv "${BACKEND_ENV_BACKUP}" "${BACKEND_ENV}"
    fi

    echo "✅ Cleanup complete"
    exit $EXIT_CODE
}

trap cleanup EXIT INT TERM

# Apply test environment to backend
echo "⚙️  Configuring backend for E2E tests..."
cat > "${BACKEND_ENV}" << 'EOF'
# E2E Test Environment - Auto-generated by run-tests-with-test-db.sh
# DO NOT EDIT - This file is temporary and will be restored after tests

DATABASE_URL=sqlite:///./data/e2e_test_transcriptions.db
AUDIO_STORAGE_PATH=./data/e2e_test_audio
E2E_TRANSCRIPTION_STUB=true
DEBUG=true
OLLAMA_MODEL=llama3.2:1b
DEFAULT_LLM_PROVIDER=ollama
OLLAMA_BASE_URL=http://localhost:11434
OPENROUTER_API_KEY=
EOF

echo "✅ Backend configured for testing"
echo ""

# Check if backend needs restart
echo "🔍 Checking backend status..."
if pgrep -f "uvicorn app.main:app" > /dev/null; then
    echo "⚠️  Backend is currently running with DEV database"
    echo "   You need to restart the backend to use the TEST database."
    echo ""
    echo "   Option 1: Stop and restart backend manually:"
    echo "     pkill -f 'uvicorn app.main:app'"
    echo "     cd backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
    echo ""
    echo "   Option 2: Let this script restart it for you? (y/n)"
    read -r RESTART_BACKEND

    if [ "$RESTART_BACKEND" = "y" ] || [ "$RESTART_BACKEND" = "Y" ]; then
        echo "🔄 Stopping backend..."
        pkill -f "uvicorn app.main:app" || true
        sleep 2

        echo "🚀 Starting backend with TEST database..."
        cd "${BACKEND_DIR}"
        python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000 > /tmp/e2e-backend.log 2>&1 &
        BACKEND_PID=$!

        echo "⏳ Waiting for backend to be ready..."
        for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1; then
                echo "✅ Backend is ready (PID: $BACKEND_PID)"
                break
            fi
            sleep 1
        done

        # Register cleanup to stop the backend we started
        cleanup_backend() {
            if [ -n "$BACKEND_PID" ]; then
                echo "🛑 Stopping test backend (PID: $BACKEND_PID)..."
                kill $BACKEND_PID 2>/dev/null || true
            fi
            cleanup
        }
        trap cleanup_backend EXIT INT TERM
    else
        echo "❌ Aborting - please restart backend manually and run this script again"
        exit 1
    fi
else
    echo "⚠️  Backend is not running. Please start it manually:"
    echo "   cd backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
    exit 1
fi

echo ""
echo "🧪 Running E2E tests..."
echo ""

cd "${SCRIPT_DIR}"
npx playwright test "$@"
TEST_EXIT_CODE=$?

# Record results
if [ $TEST_EXIT_CODE -eq 0 ]; then
    node record-test-run.js
    node update-test-status.js
fi

echo ""
if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo "✅ Tests passed!"
else
    echo "❌ Tests failed with exit code: $TEST_EXIT_CODE"
fi

echo ""
echo "📊 Test Database Location: ${BACKEND_DIR}/data/e2e_test_transcriptions.db"
echo "📁 Test Audio Files: ${BACKEND_DIR}/data/e2e_test_audio/"
echo ""

exit $TEST_EXIT_CODE
